---
-- make/make_workspace.lua
-- Workspace makefile exporting.
--
-- Author Jason Perkins
-- Copyright (c) 2017 Jason Perkins and the Premake project
---

	local make = ...
	local emit = make.emit

	local p = premake
	local Query = require('query')



---
-- Set up the module
---

	local m = {}
	m.elements = {}



---
-- Workspace export entry point
---

	m.elements.workspace = function(wks)
		return {
			m.header,
			m.projectsVar,
			m.projectGroupsVar,
			m.phonyRule,
			m.allRule,
			m.projects
		}
	end

	function m.export(wks)
		p.callArray(m.elements.workspace, wks)
	end



---
-- Emitter functions for specific makefile sections.
---

	function m.allRule(wks)
		p.w("all: $(PROJECTS)")
		p.w()
	end



	function m.header(wks)
		emit:comment("GNU Make workspace makefile autogenerated by Premake")
		p.w()
	end



	function m.phonyRule(wks)
		p.w(".PHONY: all clean help $(PROJECTS) $(PROJECT_GROUPS)")
		p.w()
	end



	function m.projectGroupsVar(wks)
		emit:assignment("PROJECT_GROUPS", nil)
		p.w()
	end



	function m.projects(wks)
		for prj in wks:eachProject() do
			m.projectRule(prj)
		end
	end



	function m.projectRule(prj)
		local location = path.getrelative(prj.workspace.location, prj.location)

		p.push('%s:', prj.name)
		p.w('@echo "==== Building %s ===="', prj.name)
		p.x('@${MAKE} --no-print-directory -C %s -f %s.make', location, prj.name)
		p.pop("")
	end



	function m.projectsVar(wks)
		local names = table.extract(wks.projects, 'name')
		emit:assignment("PROJECTS", names)
		p.w()
	end



---
-- End of module
---

	return m
